C:으로 시작하는 파일은 해당 jsp파일이 읽을 수 없다.
(서버가 읽어야 하는데 해당 로컬이 읽는 것.)

<resources mapping = "리소스에 접근할 url패턴
location ="/resources" ---> 서버가 관리하는 물리적 폴더

* 모든 url에 대해서 DispatcherServlet을 거치게 되어있다. 핸들러매핑을 통해 controller에 있는 함수를 실행

controller에서 resource_other라는 경로를 처리를 하지 않기 때문. 이미지를 보여주는 것과 같은 정적 데이터는 
controller에서 처리를 할 필요가 없기 때문. resource로 들어오는 url은 controller를 태우지 마라 라는 의미.
controller를 통하지 않고 화면에 출력되는 것이 resource세팅이다.

location에 대한 루트는 webapp이다.
세팅만 해주게 되면 resource 같은 정적 파일은 클라이언트에게 공개. 
web-INF에 있는 파일은 유저에게 보여지면 안됨. .xml파일 등 db주소가 포함되어 있다. --> url로 접근 불가

wep-app에 들어가 있는 jsp는 클라이언트가 다이렉트로 볼 수 있지만 mvc패턴은 사용하지 못한다.

=================================================================
1.정적 리소스의 종류는?
-- maven -- gradle( -- src/ main/ webapp

2.스프링에서의 정적 리소스 처리 방식은?

3.게시판 버전 2 방식에서 delete 와 contentview를 구현하시오.
4.아래를 설명하시오.
-@AutoWired
이 어노테이션은 이름을 보면 알 수 있듯이 이 어노테이션을 부여하면 각
상황의 타입에 맞는 Ioc컨테이너 안에 존재하는 Bean을 자동으로
주입해주게 된다. 
 @Inject @Resource
-@Repository
-@Service 
의존 객체 자동 주입은 스프링 설정파일에서 <constructor-arg> 혹은 <property>태그로
의존 객체 대상을 명시하지 않아도 스프링 컨테이너가 자동적으로
의존 대상 객체를 찾아 해당 객체에 필요한 의존성을 주입하는 것을 말한다.
이것을 구현하는 방법은 @Autowired또는 @Resource 어노테이션을
사용하여 구현한다. 그리고 이 두 어노테이션은 의존 객체를 찾는
방식에 있어 차이가 있다.
@Autowired는 주입하려고 하는 객체의 타입이 일치하는지를 찾고
객체를 자동으로 주입한다. 만약에 타입이 존재하지 않는다면 @Autowired에
위치한 속성명이 일치하는 bean을 컨테이너에서 찾는다.
반면에 @Resource는 이름을 기준으로 객체를 찾는다. 만일 이름이
존재하지 않는다면 타입을 기준으로 자동적으로 객체를 찾아 주입한다.
@Inject는 @Autowired와 동일하게 작동한다. 하지만 자동주입될
bean객체를 찾을 때 그 찾는 순서가 다르다.

5.이벤트란 무엇이며, 이벤트 등록 방법 4가지에 대한 예를 드시오.