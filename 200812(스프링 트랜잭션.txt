**트랜잭션
1. 은행권에서의 입출금
2. insert, delete, update가 기본적으로 트랜잭션의 대상이 된다.(저 3개는 반드시 commit을 해줘야 한다.)

**폴더
1. 트랜잭션의 개념: 어떤 일련의 작업의 의미임( 한번에 이루어져야 하는 작업 단위)
2. 모두 에러 없이 끝나야 하며, 만약 중간에 에러가 발생 한다면, 에러 발생 이전 시점까지 작업되었던 내용은
모두 원상복구 되어야 함.
3. 트랜잭션은 500및 404등의 에러처리가 아니면, 에러 발생시 DB로 하여금 원상복구하도록 DB에 요청하는 것임.
(500에러 --> 코딩이 잘못되게 되면 나오는 것(내부에러).  404 --> 페이지가 없을때?  403 --> 권한.)

가장 대표적인 예는 계좌이체(입금+출금) 오류없이 완벽하게 이루어져야 한다.
중간에 정전이 일어난다면?

Commit(커밋) : 해당 connection의 요청을 완료하고 특별한 에러가 없다면 결과를 DB에 반영한다.
RollBack(롤백) : 해당 connection 수행중 예기치 않은 에러가 발생하였다면 모든 과정을 취소하고
DB를 Connection이 수행되기 이전 상태로 변경한다.

대상 SQL 명령은 insert, update, delete가 해당된다.
반드시 commit을 해줘야한다

Spring Framework에서 제공하는 Transaction을 사용하는 방법은 크게 다음과같다.
 1) spring context 설정파일에서 transaction선언.
 2) spring Transaction Anntation을 사용한 Transaction선언.
 3) spring API를 사용하여 프로그램 소스 상에 Transaaction 구현.
 
 위의 3가지 방법 중 1)과 2)는 spring AOP를 사용하는 것이고, 3)은 AOP가 아닌 순수 Spring API를 사용하는 방법이다.
 - 어쩔수 없이 프로그램에 의한 트랜잭션을 사용해야 할 경우를 제외하고,
 최대한 선언적인 트랜잭션 방식으로 프로그램을 설계해야 한다.
 - 설명한 3가지 방식 모두 설정해서 사용해도 된다. 하지만 무조건 통일적인 방식으로 할것.
 
 트랜잭션 우선순위는 메소드 > 클래스 > 인터페이스 메소드> 인터페이스  순서.
 
 ================================================
 **핵심**
-@transactional을 붙이는 곳은 반드시 비지니스로직이 실행되는 service단 이어야 한다.
다른말로, Controller에서 붙여서는 안된다.
-선언적 트랜잭션에서는 런타임 예외가 발생하면 롤백한다.
-반면에 예외가 전혀 발생하지 않거나 체크 예외가 발생하면 커밋한다(롤백하지 않는다).
-rollbackFor를 통해서 컴파일 예외를 처리할 수 있다.
@Transactional(rollbackFor = SQLException.class) 
 
 
 
 *IOException과 RuntimeException의 차이
 예외와 에러가 있다.
 
 에러 = OS가 알아서 죽인다.
 예외 = 두가지 종류 - 1.Runtime (ArithmeticException, NullpointException, ArrayindexExcetion)
 				2. 그외 예외 = 컴파일 시 예외발생 (DataFormatException, sqlException, IOException)
 런타임에러가 아닌 이상 try~catch 로 묶어주거나 throws를 해줘야한다.
  
 
 checked Exception 					uncheckedException
 RuntimeException을 제외한 모든 클래스       	RuntimeExcepetion과 자손 클래스
 