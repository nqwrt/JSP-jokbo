ajax
비동기는 안기다린다.
쓰레드로 돌리니까 비동기

*json
json은 운영체제로 부터 독립적이다.

*xml VS json
xml문서는 xml DoM을 이용하여 해당 문서에 접근.
하지만 json은 문자열을 전송받은 후에 해당 문자열을 바로 파싱하므로,
xml보다 더욱 빠른 처리속도를 보여준다.
따라서 html과 자바스크립트가 연동되어 빠른 응답이 필요한 웹 환겨에서
많이 사용되고있다.
하지만 json은 전송받은 데이터의 무결성을 사용자가 직접 검증해야 한다.
따라서 데이터의 검증이 필요한 곳에서 스키마를 사용하여 데이터의 무결성을
검증할 수 있는 xml이 아직 많이 사용되고 있다.

===========================================
1.json과 xml의 차이는?
1) JSON은 종료 태그를 사용하지 않는다.
2) JSON의 구문이 XML 구문보다 더 짧다.
3) JSON 데이터가 XML 데이터 보다 더 빨리 읽고 쓸 수 있다.
4) XML은 배열을 사용할 수 없지만, JSON은 배열을 사용할 수 있다.
4) XML은 XML파서로 파싱되며, JSON은 자바스크립트
표준 함수인 eval() 함수로 파싱된다.

2.aspectj 설정 에서 execution 과 within 의 차이는?
● execution 명시자 : Advice를 적용할 메서드를 명시할 때 사용
기본형식= execution(수식어패턴  리턴타입패턴  클래스이름패턴  이름패턴(파라미터패턴)
- 수식어패턴: public, private, default, protected 의 수식어를 명시, 생략 가능
- 리턴타입: 리턴타입을 명시
- 클래스이름, 이름패턴: 클래스 이름 및 메서드 이름을 패턴으로 명시
- 파라미터패턴: 매칭될 파라미터에 대해 명시
- '*' : 모든 값을 표현
- ' .. ' : 0개 이상을 의미

ex

▨ execution(public void set*(..))
 => 리턴 타입이 void이고 메서드 이름이 set으로 시작하며, 파라미터가 0개 이상인 메서드
▨ execution(* sp.aop.service.*.*())
 => sp.aop.service 패키지의 파라미터가 없는 모든 메서드
▨ execution(* sp.aop.service..*.*(..))
 => sp.aop.service 패키지 및 하위 패키지에 있는 파라미터가 0개 이상인 모든 메서드
▨ execution(* get*(*))
 => get으로 시작하고 1개의 파라미터를 갖는 메서드
▨ execution(Integer read*(Integer, ..))
 => 리턴 값이 Integer이고 메서드 이름이 read로 시작하며 첫번째 파라미터 타입이 Integer이고, 
1개 이상의 파라미터를 갖는 메서드

● within 명시자 : 메서드가 아닌 특정 타입에 속하는 메서드를 Pointcut으로 설정할 때 사용
ex
▨ within(sp.aop.service.*)
 => sp.aop.service 패키지에 있는 모든 메서드
▨ within(sp.aop.service..*)
 => sp.aop.service 패키지 및 하위 패키지에 있는 모든 메서드

● bean 명시자 : 스프링 빈 이름을 이용하여 Pointcut을 정의
ex
▨ bean(faqBoard)
 => 이름이 faqBoard인 빈의 메서드 호출
▨ bean(*noticeBoard)
 => 이름이 noticeBoard로 끝나는 빈의 메서드 호출

3.플러그 인을 사용하여 드래그를 만드시오.
4.플러그 인을 사용하여 지정한 기간만 허용하는 달력을 만드시오(현재 날짜를 기준으로 20일 전부터 1개월 10일후의 날짜 ).
